swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers

paths:
  /posts:
    get:
      summary: Gets all posts
      tags:
      - posts
      description: |
        By passing in the appropriate options, you can search for
        available posts in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up post
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: Maximum number of items to return
        type: integer
        format: int32
        minimum: 0
        maximum: 100
      responses:
        200:
          description: Search posts matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        400:
          description: Bad input parameter
    post:
      summary: Adds an item
      tags:
      - posts
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Post object to be added
        schema:
          $ref: '#/definitions/Post'
      responses:
        201:
          description: Post created
        400:
          description: Invalid input, object invalid
        409:
          description: An existing item already exists
  /posts/{id}:
    get:
      summary: Find post by ID
      tags:
      - posts
      description: Returns a single post
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of item to return
        required: true
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Post'
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    delete:
      summary: Deletes a post
      tags:
      - posts
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Slug of the item to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    put:
      summary: Replaces a post
      tags:
      - posts
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of post that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Post object
        schema:
          $ref: '#/definitions/Post'
      responses:
        405:
          description: Invalid input
  /blogrolls:
    get:
      summary: Gets all blogrolls
      tags:
      - blogrolls
      description: |
        By passing in the appropriate options, you can search for
        available posts in the system
      produces:
      - application/json
      responses:
        200:
          description: Get all blogrolls
          schema:
            type: array
            items:
              $ref: '#/definitions/Blogroll'
        400:
          description: Bad input parameter
    post:
      summary: Adds an item
      tags:
      - blogrolls
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Post object to be added
        schema:
          $ref: '#/definitions/Blogroll'
      responses:
        201:
          description: Blogroll created
        400:
          description: Invalid input, object invalid
        409:
          description: An existing item already exists
  /blogrolls/{id}:
    get:
      summary: Find blogroll by ID
      tags:
      - blogrolls
      description: Returns a single blogroll
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of item to return
        required: true
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Blogroll'
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    delete:
      summary: Deletes a blogroll
      tags:
      - blogrolls
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Slug of the item to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    put:
      summary: Replaces a post
      tags:
      - blogrolls
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of blogroll that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Blogroll object
        schema:
          $ref: '#/definitions/Blogroll'
      responses:
        405:
          description: Invalid input
  /types:
    get:
      summary: Gets all types
      tags:
      - types
      description: |
        By passing in the appropriate options, you can search for
        available posts in the system
      produces:
      - application/json
      responses:
        200:
          description: Get all types
          schema:
            type: array
            items:
              $ref: '#/definitions/Type'
        400:
          description: Bad input parameter
    post:
      summary: Adds an item
      tags:
      - types
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Post object to be added
        schema:
          $ref: '#/definitions/Type'
      responses:
        201:
          description: Type created
        400:
          description: Invalid input, object invalid
        409:
          description: An existing item already exists
  /types/{id}:
    get:
      summary: Find type by ID
      tags:
      - types
      description: Returns a single type
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of item to return
        required: true
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Type'
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    delete:
      summary: Deletes a type
      tags:
      - types
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Slug of the item to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    put:
      summary: Replaces a post
      tags:
      - types
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of type that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Type object
        schema:
          $ref: '#/definitions/Type'
      responses:
        405:
          description: Invalid input
  /notes:
    get:
      summary: Gets all notes
      tags:
      - notes
      description: |
        By passing in the appropriate options, you can search for
        available posts in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: postId
        description: post id
        type: integer
        format: int32
        minimum: 0
      responses:
        200:
          description: Get all notes
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
        400:
          description: Bad input parameter
    post:
      summary: Adds an item
      tags:
      - notes
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Post object to be added
        schema:
          $ref: '#/definitions/Note'
      responses:
        201:
          description: Note created
        400:
          description: Invalid input, object invalid
        409:
          description: An existing item already exists
  /notes/{id}:
    get:
      summary: Find type by ID
      tags:
      - notes
      description: Returns a single type
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of item to return
        required: true
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Note'
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    delete:
      summary: Deletes a type
      tags:
      - notes
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Slug of the item to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    put:
      summary: Replaces a post
      tags:
      - notes
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of type that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Note object
        schema:
          $ref: '#/definitions/Note'
      responses:
        405:
          description: Invalid input
  /votes:
    get:
      summary: Gets all votes
      tags:
      - votes
      description: |
        By passing in the appropriate options, you can search for
        available posts in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: postId
        description: post id
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: userId
        description: user id
        type: integer
        format: int32
        minimum: 0
      responses:
        200:
          description: Get all votes
          schema:
            type: array
            items:
              $ref: '#/definitions/Vote'
        400:
          description: Bad input parameter
    post:
      summary: Adds an item
      tags:
      - votes
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Post object to be added
        schema:
          $ref: '#/definitions/Vote'
      responses:
        201:
          description: Vote created
        400:
          description: Invalid input, object invalid
        409:
          description: An existing item already exists
  /votes/{id}:
    get:
      summary: Find type by ID
      tags:
      - votes
      description: Returns a single type
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of item to return
        required: true
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/Vote'
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    delete:
      summary: Deletes a type
      tags:
      - votes
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Slug of the item to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    put:
      summary: Replaces a post
      tags:
      - votes
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of type that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Vote object
        schema:
          $ref: '#/definitions/Vote'
      responses:
        405:
          description: Invalid input
  /users:
    get:
      summary: Gets all users
      tags:
      - users
      description: |
        By passing in the appropriate options, you can search for
        available posts in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: name
        description: post name
        type: string
        minimum: 0
      - in: query
        name: email
        description: user email
        type: string
        minimum: 0
      responses:
        200:
          description: Get all users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Bad input parameter
    post:
      summary: Adds an item
      tags:
      - users
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Post object to be added
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: User created
        400:
          description: Invalid input, object invalid
        409:
          description: An existing item already exists
  /users/{id}:
    get:
      summary: Find type by ID
      tags:
      - users
      description: Returns a single type
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of item to return
        required: true
        type: string
      responses:
        200:
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    delete:
      summary: Deletes a type
      tags:
      - users
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Slug of the item to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Item not found
    put:
      summary: Replaces a post
      tags:
      - users
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of type that needs to be updated
        required: true
        type: string
      - in: body
        name: body
        description: User object
        schema:
          $ref: '#/definitions/User'
      responses:
        405:
          description: Invalid input
definitions:
  Post:
    type: object
    required:
    - id
    - title
    - body
    - image
    - author
    - type
    properties:
      id:
        type: integer
        example: 0
      title:
        type: string
        example: Nodo para cartoon
      body:
        type: string
        example: Con este nodo para eevee
      image:
        type: string
        example: /assets/images/cartoon001.png
      created:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      updated:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      autor:
        $ref: '#/definitions/User'
      from:
        type: string
        $ref: '#/definitions/Blogroll'
      types:
        type: array
        items:
          $ref: '#/definitions/Type'
      engines:
        type: array
        items:
          type: string
          example: eevee
      videos:
        type: array
        items:
          type: string
          example: http://www.youtube.com/?watch=123456789
      downloads:
        type: array
        items:
          type: string
          example: /assets/downloads/cartoon001.blend
      notes:
        type: array
        items:
          $ref: '#/definitions/Note'
      votes:
        type: array
        items:
          $ref: '#/definitions/Vote'
  Blogroll:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        example: 0
      text:
        type: string
        example: CG-Cookies
  Type:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        example: 0
      text:
        type: string
        example: Node groups
  Note:
    type: object
    required:
      - id
      - name
      - ParentId
    properties:
      id:
        type: integer
        example: 0
      name:
        type: string
        example: this is uuseful for cartoons
      ParentId:
        type: integer
        example: 0
  Vote:
    type: object
    required: 
      - id
      - user_id
      - post_id
      - value
    properties:
      id:
        type: integer
        example: 7
      user_id:
        type: integer
        example: 3
      post_id:
        type: integer
        example: 4
      value:
        type: integer
        example: 5
  User:
    type: object
    required:
      - id
      - email
      - userName
      - password
    properties:
      id:
        type: integer
        example: 8
      email:
        type: string
        example: email@example.com
      name:
        type: string
        example: John Smith
      password:
        type: string
        example: secret
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /mcalvo84/BlenderNotes2/1.0.0
schemes:
 - https